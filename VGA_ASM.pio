;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;
.pio_version 0 // only requires PIO version 0

.program VGACOM
.side_set 1 opt

; flag off
    IRQ set 7
;-------------------------------------------------
; TX
    wait 1 IRQ 7 
    wait 0 IRQ 0    ; VSYNC
    wait 0 IRQ 1    ; HSYNC
    out pins, 6  [2]   
;--------------------------------------------
; HSYNC/VSYNC code 
    pull block
    mov ISR, OSR
    pull block
    mov y, OSR
    wait 1 IRQ 7
active: 
    mov OSR, ISR
    IRQ clear 0 rel ;HSYNC - 1, VSYNC - 0
    out x, 10   side 1
loop_active:
    mov exec, y     ;executes WAIT 1 IRQ 6 for VSYNC. nop for HSYNC
    jmp x-- loop_active

front_porch: 
    IRQ set 0 rel   ;HSYNC - 1, VSYNC - 0
    IRQ set 2 rel   ;HSYNC - 3, VSYNC - 2
    out x, 6
loop_front_porch: 
    mov exec, y     ;executes WAIT 1 IRQ 6 for VSYNC. nop for HSYNC
    jmp x-- loop_front_porch

sync: 
    out x, 7    side 0
loop_sync:
    mov exec, y     ;executes WAIT 1 IRQ 6 for VSYNC. nop for HSYNC
    jmp x-- loop_sync

back_porch:
    out x, 7    side 1
loop_back_porch:
    mov exec, y     ;executes WAIT 1 IRQ 6 for VSYNC. nop for HSYNC
    jmp x-- loop_back_porch
    IRQ set 6

% c-sdk {

#define TX_START 1
#define TX_WRAP_TARGET 2
#define TX_WRAP 4

#define SYNC_START 5
#define SYNC_WRAP_TARGET 10
#define SYNC_WRAP 26

static inline void VGACOM_program_init(PIO pio, uint sm, uint pin, uint start_instr, uint wrap_target, uint wrap, float clkdiv) {
    pio_sm_config c = VGACOM_program_get_default_config(0);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, 6);

    // Set this pin's GPIO function(connect PIO to the pad)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    pio_gpio_init(pio, pin+2);
    pio_gpio_init(pio, pin+3);
    pio_gpio_init(pio, pin+4);
    pio_gpio_init(pio, pin+5);

    sm_config_set_clkdiv(&c, clkdiv);

    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 6, true);

    sm_config_set_out_shift(&c, false, true, 30);
    sm_config_set_wrap(&c, wrap_target, wrap);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, start_instr, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

static inline void VGASYNC_program_init(PIO pio, uint sm, uint pin, uint start_instr, uint wrap_target, uint wrap, float clkdiv, uint data_pin){
    pio_sm_config c = VGACOM_program_get_default_config(start_instr);
    pio_gpio_init(pio, pin);
    sm_config_set_clkdiv(&c, clkdiv);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_set_pins(&c, data_pin, 6);    // this is to set data pins to zero when not in active state of sync signals. 
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    sm_config_set_out_shift(&c, true, false, 32);   // OSRE shift to right
    sm_config_set_wrap(&c, wrap_target, wrap);
    pio_sm_init(pio, sm, start_instr, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}